#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('suckuptoai:server');
var http = require('http');

//日付処理用
var moment = require('moment');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//追加

//チャンネル内の人数格納用のオブジェクト
var userCnt = {
  a:0,
  b:0,
  c:0,
  d:0,
  e:0,
  f:0
}

//ゲームが始められる状態かを格納(ユーザーが2人に達しているか)
var startFlag = {
  a:false,
  b:false,
  c:false,
  d:false,
  e:false,
  f:false
}

//ゲーム進行中状態かを格納(ゲームが終わっているかどうかのため)
var gameFlag = {
  a:false,
  b:false,
  c:false,
  d:false,
  e:false,
  f:false
}

var io = require('socket.io').listen(server);

//socket.ioに接続された時に動く
io.on('connection',function(socket){

  //接続された時間を格納
  var entry_Date = moment();

  //接続時に振られた一意のIDをコンソールに表示
  console.log('入室したID:'+socket.id+entry_Date);

  //最後には消す////
  io.to(socket.id).emit('message', socket.id,'あなたのID');
  io.to(socket.id).emit('access', socket.id,entry_Date);
  /////////////////////

  //チャンネルをループで回し、2人以下のところに割振る
    for (var k in userCnt) {
        console.log(userCnt[k]);
        console.log(gameFlag[k]);
        //チャンネル入室人数が2人以下　かつ　ゲームが終わっている　かつ　'f'チャンネルでないところに入る
        if(userCnt[k] < 2 && gameFlag[k] == false && k != 'f'){
          var channel = k;
          console.log(k);
          break;
        }else if(k == 'f'){
          var channel = 'f';
          console.log(k);
          break;
        }
    }

  //接続時に同じチャンネルの人にIDを表示
  //最後には消す
  io.sockets.in(channel).emit('message', socket.id + 'さんが入室しました!','System');
  //////////////////

  //Roomを初期化
  socket.join(channel);
  //チャンネル入室人数の増加処理
  if (channel === 'a') {
  userCnt.a++;
  }else if(channel === 'b'){
  userCnt.b++;
  }else if(channel === 'c'){
  userCnt.c++;
  }else if(channel === 'd'){
  userCnt.d++;
  }else if(channel=== 'e'){
  userCnt.e++;
  }else if(channel === 'f'){
  userCnt.f++;
  //チャンネルが'f'だった場合のクライアントへの送信処理
  io.sockets.in(channel).emit('isCheck_f',true);
  }
  console.log(userCnt);

  //全ユーザ上のユーザ数を更新
  io.emit('user cnt', userCnt);

  //チャンネルに1人しかいない場合はゲームが始まらない
  //チャンネルに2人が入ればゲームスタート(startFlagをtrue)
  switch(channel){
    case 'a':
    if(userCnt.a < 2){
      startFlag.a = false;
      io.sockets.in(channel).emit('startFlag',startFlag.a);
    }else if(userCnt.a == 2){
      //最後には消す
      io.sockets.in(channel).emit('message','channel1が2人に達しました。','System');
      ////////以下同じ
      startFlag.a = true;
      gameFlag.a = true;
      io.sockets.in(channel).emit('startFlag',startFlag.a);
    }
    break;
    case 'b':
    if(userCnt.b < 2){
      startFlag.b = false;
      io.sockets.in(channel).emit('startFlag',startFlag.b);
    }else if(userCnt.b == 2){
      io.sockets.in(channel).emit('message','channel1が2人に達しました。','System');
      startFlag.b = true;
      gameFlag.b = true;
      io.sockets.in(channel).emit('startFlag',startFlag.b);
    }
    break;
    case 'c':
    if(userCnt.c < 2){
      startFlag.c = false;
      io.sockets.in(channel).emit('startFlag',startFlag.c);
    }else if(userCnt.c == 2){
      io.sockets.in(channel).emit('message','channel1が2人に達しました。','System');
      startFlag.c = true;
      gameFlag.c = true;
      io.sockets.in(channel).emit('startFlag',startFlag.c);
    }
    break;
    case 'd':
    if(userCnt.d < 2){
      startFlag.d = false;
      io.sockets.in(channel).emit('startFlag',startFlag.d);
    }else if(userCnt.d == 2){
      io.sockets.in(channel).emit('message','channel1が2人に達しました。','System');
      startFlag.d = true;
      gameFlag.d = true;
      io.sockets.in(channel).emit('startFlag',startFlag.d);
    }
    break;
    case 'e':
    if(userCnt.e < 2){
      startFlag.e = false;
      io.sockets.in(channel).emit('startFlag',startFlag.e);
    }else if(userCnt.e == 2){
      io.sockets.in(channel).emit('message','channel1が2人に達しました。','System');
      startFlag.e = true;
      gameFlag.e = true;
      io.sockets.in(channel).emit('startFlag',startFlag.e);
    }
    break;
  }

////以下-イベント関数////////////////////////////////////////

  //ユーザーネームとレートを送る (クライアント <-> クライアント)
  socket.on('userName',function(name,rate){
  socket.in(channel).broadcast.emit('userName',name,rate);
  console.log('サクセス');
  });

  //アクセスした時の時刻を送るイベント　(サーバー -> クライアント)
  socket.on('access',function(id,entry_Date){
    io.to(socket.id).emit('access', socket.id,entry_Date);
  });

  //アクセス時、チャンネルがFである場合　(サーバー -> クライアント)
  socket.on('isCheck_f',function(f){
    io.to(socket.id).emit('isCheck_f',f);
  })

  //最後には消す
  //messageイベントで動く
  //同じチャンネルの人にメッセージとIDを表示 (クライアント <-> クライアント)
  socket.on('message',function(msj){
  io.sockets.in(channel).emit('message',msj,socket.id);
  });
  /////////////////////////////////////

  //対戦相手にゲーム終了と合計スコアを送る(クライアント <-> クライアント)
  socket.on('endFlag_score',function(sumScore){
  socket.in(channel).broadcast.emit('endFlag_score',sumScore);
  });


  //接続が切れた時に動く
  //接続が切れたIDを全員に表示
  //ゲーム終了時の退出(2人とも)か、2人ともゲーム中の途中退出でgameFlagを下げる
  socket.on('disconnect',function(e){

  //最後には消す
  io.sockets.in(channel).emit('message', socket.id + 'さんが退出しました!','System');
  console.log(socket.id+'さんが退出しました');
  ////////////////////

  switch(channel){
    case 'a':
    userCnt.a--;
    if(userCnt.a == 0){
      gameFlag.a = false;
    }
    break;
    case 'b':
    userCnt.b--;
    if(userCnt.b == 0){
      gameFlag.b = false;
    }
    break;
    case 'c':
    userCnt.c--;
    if(userCnt.c == 0){
      gameFlag.c = false;
    }
    break;
    case 'd':
    userCnt.d--;
    if(userCnt.d == 0){
      gameFlag.d = false;
    }
    break;
    case 'e':
    userCnt.e--;
    if(userCnt.e == 0){
      gameFlag.e = false;
    }
    break;
    case 'f':
    userCnt.f--;
    break;
  }


  //アクティブユーザを更新
  console.log(userCnt);
  io.emit('user cnt', userCnt);
  });

  //最後には消す
  //チャンネルを変えた時に動く
  //今いるチャンネルを出て、選択したチャンネルに移動する
  socket.on('change channel',function(newChannel){
  io.sockets.in(channel).emit('message', socket.id + 'さんが退室しました!','System');

  if (channel === 'a') {
  userCnt.a--;
  }else if(channel === 'b'){
  userCnt.b--;
  }else if(channel === 'c'){
  userCnt.c--;
  }else if(channel === 'd'){
  userCnt.d--;
  }else if(channel === 'e'){
  userCnt.e--;
  }else if(channel === 'f'){
  userCnt.f--;
  }

  if (newChannel === 'a') {
  userCnt.a++;
  }else if(newChannel === 'b'){
  userCnt.b++;
  }else if(newChannel === 'c'){
  userCnt.c++;
  }else if(newChannel === 'd'){
  userCnt.d++;
  }else if(newChannel=== 'e'){
  userCnt.e++;
  }else if(newChannel === 'f'){
  userCnt.f++;
  }

  console.log(userCnt);
  io.emit('user cnt', userCnt);

  socket.leave(channel);//チャンネルを去る
  socket.join(newChannel);//選択された新しいルームに入る
  channel = newChannel;//今いるチャンネルを保存
  socket.emit('change channel',newChannel);//チャンネルを変えたことを自分に送信
  io.sockets.in(channel).emit('message', socket.id + 'さんが入室しました!','System');
  });
  /////////////////////////

});
