#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('suckuptoai:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//追加

//チャンネル内の人数格納用のオブジェクト
var userCnt = {
  a:0,
  b:0,
  c:0,
  d:0,
  e:0,
  f:0
}

//接続するチャンネルの値を格納



var io = require('socket.io').listen(server);

//socket.ioに接続された時に動く
io.on('connection',function(socket){


  //接続時に振られた一意のIDをコンソールに表示
  console.log('入室したID:'+socket.id);

  for (var k in userCnt) {
      console.log(userCnt[k]);
      if(userCnt[k] < 2 && k != 'f'){
        var channel = k;
        console.log(k);
        break;
      }else if(k == 'f'){
        var channel = 'f';
        console.log(k);
        break;
      }
  }




  //接続時に同じチャンネルの人にIDを表示
  io.sockets.in(channel).emit('message', socket.id + 'さんが入室しました!','System');

  //Roomを初期化
  socket.join(channel);
  if (channel === 'a') {
  userCnt.a++;
  }else if(channel === 'b'){
  userCnt.b++;
  }else if(channel === 'c'){
  userCnt.c++;
  }else if(channel === 'd'){
  userCnt.d++;
  }else if(channel=== 'e'){
  userCnt.e++;
  }else if(channel === 'f'){
  userCnt.f++;
  }

  console.log(userCnt);

  io.emit('user cnt', userCnt);//全ユーザ上のユーザ数を更新

  //messageイベントで動く
  //同じチャンネルの人にメッセージとIDを表示
  socket.on('message',function(msj){
  io.sockets.in(channel).emit('message',msj,socket.id);
  });


  //接続が切れた時に動く
  //接続が切れたIDを全員に表示
  socket.on('disconnect',function(e){
  io.sockets.in(channel).emit('message', socket.id + 'さんが退出しました!','System');
  console.log(socket.id+'さんが退出しました');
  if (channel === 'a') {
  userCnt.a--;
  }else if(channel === 'b'){
  userCnt.b--;
  }else if(channel === 'c'){
  userCnt.c--;
  }else if(channel === 'd'){
  userCnt.d--;
  }else if(channel === 'e'){
  userCnt.e--;
  }else if(channel === 'f'){
  userCnt.f--;
  }

  //アクティブユーザを更新
  console.log(userCnt);
  io.emit('user cnt', userCnt);
  });

  //チャンネルを変えた時に動く
  //今いるチャンネルを出て、選択したチャンネルに移動する
  socket.on('change channel',function(newChannel){
  io.sockets.in(channel).emit('message', socket.id + 'さんが退室しました!','System');

  if (channel === 'a') {
  userCnt.a--;
}else if(channel === 'b'){
  userCnt.b--;
}else if(channel === 'c'){
  userCnt.c--;
}else if(channel === 'd'){
  userCnt.d--;
}else if(channel === 'e'){
  userCnt.e--;
}else if(channel === 'f'){
  userCnt.f--;
  }

  if (newChannel === 'a') {
  userCnt.a++;
}else if(newChannel === 'b'){
  userCnt.b++;
}else if(newChannel === 'c'){
  userCnt.c++;
}else if(newChannel === 'd'){
  userCnt.d++;
}else if(newChannel=== 'e'){
  userCnt.e++;
}else if(newChannel === 'f'){
  userCnt.f++;
  }

  console.log(userCnt);
  io.emit('user cnt', userCnt);

  socket.leave(channel);//チャンネルを去る
  socket.join(newChannel);//選択された新しいルームに入る
  channel = newChannel;//今いるチャンネルを保存
  socket.emit('change channel',newChannel);//チャンネルを変えたことを自分に送信
  io.sockets.in(channel).emit('message', socket.id + 'さんが入室しました!','System');
  });
});
